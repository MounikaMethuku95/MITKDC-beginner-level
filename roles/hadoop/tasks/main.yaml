# Hadoop installation & configuration tasks
# Fail early if not root
- name: Assert we run as root (fail early if not)
  ansible.builtin.assert:
    that: ansible_user_id == "root"
    fail_msg: "You must run Hadoop installation as root!"

# Set Java package name based on OS
- name: Set Java package and JAVA_HOME based on OS
  ansible.builtin.set_fact:
    java_pkg: "{{ 'java-11-openjdk-devel' if ansible_os_family == 'RedHat' else 'openjdk-11-jdk' }}"
    java_home: "{{ '/usr/lib/jvm/java-11-openjdk' if ansible_os_family == 'RedHat' else '/usr/lib/jvm/java-11-openjdk-amd64' }}"

# Install Java
- name: Install Java package
  ansible.builtin.package:
    name: "{{ java_pkg }}"
    state: present

# Ensure hadoop group exists
- name: Ensure hadoop group exists
  ansible.builtin.group:
    name: hadoop
    state: present

# Ensure hadoop user exists
- name: Ensure hadoop user exists
  ansible.builtin.user:
    name: hadoop
    group: hadoop
    create_home: yes
    shell: /bin/bash
    state: present

# Ensure directories for Hadoop exist
- name: Ensure parent directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: hadoop
    group: hadoop
    mode: '0755'
  loop:
    - /opt
    - /opt/hadoop
    - /var/lib/hadoop/hdfs/namenode
    - /var/lib/hadoop/hdfs/datanode
    - /var/lib/hadoop/tmp

# Download Hadoop tarball if not already there
- name: Download Hadoop tarball
  ansible.builtin.get_url:
    url: "https://downloads.apache.org/hadoop/common/hadoop-3.2.0/hadoop-3.2.0.tar.gz"
    dest: /opt/hadoop-3.2.0.tar.gz
    mode: '0644'
  register: hadoop_download
  when: not (ansible_facts['os_family'] == 'Debian' and ansible_distribution_major_version|int >= 12)

# Extract Hadoop tarball
- name: Extract Hadoop tarball (if not already installed)
  ansible.builtin.unarchive:
    src: /opt/hadoop-3.2.0.tar.gz
    dest: /opt/
    remote_src: yes
    creates: /opt/hadoop-3.2.0
  when: hadoop_download is changed

# Create symbolic link /opt/hadoop
- name: Create hadoop symlink to versioned directory
  ansible.builtin.file:
    src: /opt/hadoop-3.2.0
    dest: /opt/hadoop
    state: link
    force: yes

# Deploy Hadoop configuration files
- name: Deploy core-site.xml
  ansible.builtin.template:
    src: core-site.xml.j2
    dest: /opt/hadoop/etc/hadoop/core-site.xml
    owner: hadoop
    group: hadoop
    mode: '0644'
  notify:
    - Restart NameNode
    - Restart DataNode

- name: Deploy hdfs-site.xml
  ansible.builtin.template:
    src: hdfs-site.xml.j2
    dest: /opt/hadoop/etc/hadoop/hdfs-site.xml
    owner: hadoop
    group: hadoop
    mode: '0644'
  notify:
    - Restart NameNode
    - Restart DataNode

- name: Deploy yarn-site.xml
  ansible.builtin.template:
    src: yarn-site.xml.j2
    dest: /opt/hadoop/etc/hadoop/yarn-site.xml
    owner: hadoop
    group: hadoop
    mode: '0644'
  notify:
    - Restart ResourceManager
    - Restart NodeManager

- name: Deploy mapred-site.xml
  ansible.builtin.template:
    src: mapred-site.xml.j2
    dest: /opt/hadoop/etc/hadoop/mapred-site.xml
    owner: hadoop
    group: hadoop
    mode: '0644'
  notify:
    - Restart ResourceManager
    - Restart NodeManager

- name: Deploy hadoop-env.sh
  ansible.builtin.template:
    src: hadoop-env.sh.j2
    dest: /opt/hadoop/etc/hadoop/hadoop-env.sh
    owner: hadoop
    group: hadoop
    mode: '0755'
  notify:
    - Restart NameNode
    - Restart DataNode
    - Restart ResourceManager
    - Restart NodeManager

# Format NameNode (only if not formatted already)
- name: Format NameNode (first time only)
  ansible.builtin.command: /opt/hadoop/bin/hdfs namenode -format -force
  args:
    creates: /var/lib/hadoop/hdfs/namenode/current
  become: true
  become_user: hadoop

# Start Hadoop services (HDFS + YARN)
- name: Start HDFS daemons (NameNode, DataNode)
  ansible.builtin.shell: /opt/hadoop/sbin/start-dfs.sh
  become: true
  become_user: hadoop

- name: Start YARN daemons (ResourceManager, NodeManager)
  ansible.builtin.shell: /opt/hadoop/sbin/start-yarn.sh
  become: true
  become_user: hadoop
