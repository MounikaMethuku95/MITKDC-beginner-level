# roles/hadoop/tasks/main.yaml
# Installs Hadoop 3.2.1, configures, formats namenode once, creates systemd units and starts services.

- name: Assert we run as root (fail early if not)
  ansible.builtin.assert:
    that: ansible_user_id == 'root' or ansible_become is defined
    fail_msg: "Play should be run with become: true or as root."

# 1) Install Java - choose package based on distro
- name: Set Java package and JAVA_HOME based on OS
  ansible.builtin.set_fact:
    java_package: "{{ java_package_redhat if ansible_facts['os_family'] == 'RedHat' else java_package_debian }}"
    java_home_guess: "{{ java_home_redhat if ansible_facts['os_family'] == 'RedHat' else java_home_debian }}"

- name: Install Java package
  ansible.builtin.package:
    name: "{{ java_package }}"
    state: present
  become: true

# 2) Create hadoop group and user
- name: Ensure hadoop group exists
  ansible.builtin.group:
    name: "{{ hadoop_group }}"
    state: present
  become: true

- name: Ensure hadoop user exists
  ansible.builtin.user:
    name: "{{ hadoop_user }}"
    group: "{{ hadoop_group }}"
    create_home: no
    shell: /bin/bash
    state: present
  become: true

# 3) Create parent and HDFS data directories
- name: Ensure parent directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ hadoop_user }}"
    group: "{{ hadoop_group }}"
    mode: '0755'
  loop:
    - "{{ hadoop_parent }}"
    - "{{ hadoop_namenode_dir }}"
    - "{{ hadoop_datanode_dir }}"
    - "{{ hadoop_tmp_dir }}"
  become: true

# 4) Download Hadoop tarball
- name: Download Hadoop tarball
  ansible.builtin.get_url:
    url: "{{ hadoop_download_url }}"
    dest: "/tmp/{{ hadoop_tarball }}"
    mode: '0644'
    force: no
  become: true

- name: Extract Hadoop tarball (if not already installed)
  ansible.builtin.unarchive:
    src: "/tmp/{{ hadoop_tarball }}"
    dest: "{{ hadoop_parent }}"
    extra_opts: [--strip-components=1]
    creates: "{{ hadoop_home }}"
  become: true

# 5) Create symlink /opt/hadoop -> current version
- name: Create hadoop symlink to versioned directory
  ansible.builtin.file:
    src: "{{ hadoop_home }}"
    dest: "{{ hadoop_symlink }}"
    state: link
    owner: "{{ hadoop_user }}"
    group: "{{ hadoop_group }}"
  become: true

# 6) Ensure ownership of hadoop directories
- name: Ensure ownership of hadoop install and data dirs
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: "{{ hadoop_user }}"
    group: "{{ hadoop_group }}"
  loop:
    - "{{ hadoop_home }}"
    - "{{ hadoop_symlink }}"
    - "{{ hadoop_namenode_dir }}"
    - "{{ hadoop_datanode_dir }}"
    - "{{ hadoop_tmp_dir }}"
  become: true

# 7) Deploy hadoop-env.sh (sets JAVA_HOME)
- name: Deploy hadoop-env.sh
  ansible.builtin.template:
    src: hadoop-env.sh.j2
    dest: "{{ hadoop_symlink }}/etc/hadoop/hadoop-env.sh"
    owner: "{{ hadoop_user }}"
    group: "{{ hadoop_group }}"
    mode: '0644'
  become: true

# 8) Deploy XML config files
- name: Deploy core-site.xml
  ansible.builtin.template:
    src: core-site.xml.j2
    dest: "{{ hadoop_symlink }}/etc/hadoop/core-site.xml"
    owner: "{{ hadoop_user }}"
    group: "{{ hadoop_group }}"
    mode: '0644'
  become: true

- name: Deploy hdfs-site.xml
  ansible.builtin.template:
    src: hdfs-site.xml.j2
    dest: "{{ hadoop_symlink }}/etc/hadoop/hdfs-site.xml"
    owner: "{{ hadoop_user }}"
    group: "{{ hadoop_group }}"
    mode: '0644'
  become: true

- name: Deploy yarn-site.xml
  ansible.builtin.template:
    src: yarn-site.xml.j2
    dest: "{{ hadoop_symlink }}/etc/hadoop/yarn-site.xml"
    owner: "{{ hadoop_user }}"
    group: "{{ hadoop_group }}"
    mode: '0644'
  become: true

- name: Deploy mapred-site.xml
  ansible.builtin.template:
    src: mapred-site.xml.j2
    dest: "{{ hadoop_symlink }}/etc/hadoop/mapred-site.xml"
    owner: "{{ hadoop_user }}"
    group: "{{ hadoop_group }}"
    mode: '0644'
  become: true

# 9) Ensure HDFS name/current does not exist before formatting
- name: Check whether namenode is already formatted
  ansible.builtin.stat:
    path: "{{ hadoop_namenode_dir }}/current/VERSION"
  register: namenode_version
  become: true

# 10) Format namenode only if not formatted yet
- name: Format HDFS NameNode (only runs once)
  ansible.builtin.command:
    cmd: "{{ hadoop_symlink }}/bin/hdfs namenode -format -force -nonInteractive"
    creates: "{{ hadoop_namenode_dir }}/current/VERSION"
    chdir: "{{ hadoop_symlink }}"
    warn: false
  become: true
  become_user: "{{ hadoop_user }}"
  when: not namenode_version.stat.exists

# 11) Create simple systemd unit files (NameNode, DataNode, ResourceManager, NodeManager)
- name: Deploy systemd unit for hadoop-namenode
  ansible.builtin.template:
    src: hadoop-namenode.service.j2
    dest: /etc/systemd/system/hadoop-namenode.service
    mode: '0644'
  become: true

- name: Deploy systemd unit for hadoop-datanode
  ansible.builtin.template:
    src: hadoop-datanode.service.j2
    dest: /etc/systemd/system/hadoop-datanode.service
    mode: '0644'
  become: true

- name: Deploy systemd unit for hadoop-resourcemanager
  ansible.builtin.template:
    src: hadoop-resourcemanager.service.j2
    dest: /etc/systemd/system/hadoop-resourcemanager.service
    mode: '0644'
  become: true

- name: Deploy systemd unit for hadoop-nodemanager
  ansible.builtin.template:
    src: hadoop-nodemanager.service.j2
    dest: /etc/systemd/system/hadoop-nodemanager.service
    mode: '0644'
  become: true

# 12) Reload systemd and enable/start services
- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: yes
  become: true
  notify: Reload systemd

- name: Enable and start Hadoop NameNode
  ansible.builtin.systemd:
    name: hadoop-namenode
    enabled: yes
    state: started
  become: true

- name: Enable and start Hadoop DataNode
  ansible.builtin.systemd:
    name: hadoop-datanode
    enabled: yes
    state: started
  become: true

- name: Enable and start Hadoop ResourceManager
  ansible.builtin.systemd:
    name: hadoop-resourcemanager
    enabled: yes
    state: started
  become: true

- name: Enable and start Hadoop NodeManager
  ansible.builtin.systemd:
    name: hadoop-nodemanager
    enabled: yes
    state: started
  become: true

# 13) Simple health check: run 'hdfs dfs -ls /' to ensure HDFS responds (non-fatal)
- name: Quick HDFS check
  ansible.builtin.command:
    cmd: "{{ hadoop_symlink }}/bin/hdfs dfs -ls /"
  become: true
  become_user: "{{ hadoop_user }}"
  register: hdfs_check
  failed_when: false
  changed_when: false
